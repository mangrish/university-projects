%!PS-Adobe-3.0
%%Creator: A2ps version 4.3
%%CreationDate: Tue Sep 12 14:07:58 2000
%%Pages: (atend)
%%DocumentFonts: Courier Courier-Bold Helvetica Helvetica-Bold
%%EndComments
% Copyright (c) 1993, 1994, Miguel Santana, M.Santana@frgu.bull.fr

/$a2psdict 100 dict def
$a2psdict begin

% General macros.
/xdef {exch def} bind def
/getfont {exch findfont exch scalefont} bind def

% Create Courier backspace font
/backspacefont {
    /Courier findfont dup length dict begin
	{ % forall
	    1 index /FID eq { pop pop } { def } ifelse
	} forall
	currentdict /UniqueID known { % if
	    /UniqueID UniqueID 16#800000 xor def
	} if
	CharStrings length 1 add dict begin
	    CharStrings { def } forall
	    /backspace { -600 0 0 0 0 0 setcachedevice } bind def
	    currentdict
	end
	/CharStrings exch def
	/Encoding Encoding 256 array copy def
	Encoding 8 /backspace put
	currentdict
    end
    definefont pop
} bind def

% FUNCTIONS

% Function filename: Initialize file printing.
/fn
{ /filenm xdef
  /filenmwidth filenm stringwidth pop def
  /filenmfont
       filenmwidth fns gt
       {
	       filenmfontname
	       fnfs fns mul filenmwidth div
	     getfont
       }
       { sfnf }
     ifelse
  def
} bind def

% Function header: prints page header. no page
% is passed as argument.
/hp
  { x sd get  y sd get hs sub 1 add  moveto
    df setfont
    gsave
      x sd get y sd get moveto
      0 hs 2 div neg rmoveto 
      hs setlinewidth
      0.95 setgray
      pw 0 rlineto stroke
    grestore
    gsave
      dfs hm rmoveto
      d show				% date/hour
    grestore
    gsave
      pnum cvs pop				% page pop up
        pw (Page 999) stringwidth pop sub
        hm
	  rmoveto
      (Page ) show pnum show		% page number
    grestore
    empty pnum copy pop
    gsave
      filenmfont setfont
         fns filenm stringwidth pop sub 2 div dw add
          bm 2 mul 
        add 
        hm
      rmoveto
        filenm show			% file name
      grestore
    } bind def

% Function border: prints border page
/border 
{ x sd get y sd get moveto
  gsave				% print four sides
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function hborder: completes border of the header.
/hborder 
{ gsave
	0.7 setlinewidth
	0 hs neg rmoveto
	pw 0 rlineto
	stroke
  grestore
} bind def

% Function sheetnumber: prints the sheet number.
/sn
    { snx sny moveto
      df setfont
      pnum cvs
	  dup stringwidth pop (0) stringwidth pop sub neg 0 rmoveto show
      empty pnum copy pop
    } bind def

% Function loginprint: prints the login id of the requestor.
/lgp
    { lx ly moveto
      df setfont
      dup stringwidth pop neg 0 rmoveto show
    } bind def

% Function currentdate: prints the current date.
/cd
    { dx dy moveto
      df setfont
      (Printed: ) show
      td show
    } bind def

% Function filename_footer: prints the file name at bottom of page.
/fnf
    { fnx fny moveto
      df setfont
      filenm center show
    } bind def

% Function center: centers text.
/center
    { dup stringwidth pop
      2 div neg 0 rmoveto
    } bind def

% Function s: print a source line
/s  { show
      /y0 y0 bfs sub def
      x0 y0 moveto
    } bind def

% Functions b and st: change to bold or standard font
/b  { show
      bdf setfont
    } bind def
/st { show
      bf setfont
    } bind def

% Strings used to make easy printing numbers
/pnum 12 string def
/empty 12 string def

% Global initializations

/CourierBack backspacefont
/filenmfontname /Helvetica-Bold def
/inch {72 mul} bind def

%
% Meaning of some variables and functions (coded names)
%
%	twp:		twinpages?
%	sd:		sheet side
%	l:		line counter
%	c:		column counter
%	d:		date
%	td:		current date (for today)
%	lg:		login name
%	fn:		filename printing function
%	sn:		sheetnumber printing function
%	cd:		current date printing function
%	fnf:		filename footer printing function
%	lgp:		login printing function
%	hp:		header printing function
%	y:		y coordinate for the logical page
%	x:		x coordinate for the logical page
%	sny:		y coordinate for the sheet number
%	snx:		x coordinate for the sheet number
%	dy:		y coordinate for the date
%	dx:		x coordinate for the date
%	ly:		y coordinate for the login
%	lx:		x coordinate for the login
%	scx:		x coordinate for the sheet center
%	fny:		y coordinate for the filename (footer)
%	fnx:		x coordinate for the filename (footer)
%	fnfs:		filename font size
%	bfs:		body font size
%	dfs:		date font size
%	bfs:		body font size
%	df:		date font
%	bf:		body font
%	bdf:		bold font
%	sfnf:		standard filename font
%	dw:		date width
%	pw:		page width
%	sw:		sheet width
%	ph:		page height
%	sh:		sheet height
%	hm:		header margin
%	tm:		top margin
%	bm:		body margin
%	rm:		right margin
%	lm:		left margin
%	hs:		header size
%	fns:		filename size

% Initialize page description variables.
/x0 0 def
/y0 0 def
/sh 11.64 inch def
/sw 8.27 inch def
/margin 1.4 inch def
/rm margin 3 div def
/lm margin 2 mul 3 div def
/d () def
/td (Sep 12 2000 14:07) def
/lg (Printed by dwyer from mundook.cs.mu.OZ.AU) def
%%EndProlog

/docsave save def
%%Page: 1 1
/pagesave save def
/twp true def
/fnfs 11 def
/dfs fnfs 0.8 mul def
/df /Helvetica dfs getfont def
/dw df setfont td stringwidth pop def
/sfnf filenmfontname fnfs getfont def
/hm fnfs 0.25 mul def
/hs 0.22 inch def
/bfs 6.8 def
/bdf /Courier-Bold bfs getfont def
/bm bfs 0.7 mul def
/bf /CourierBack bfs getfont def
/l 69 def
/c 89 def
/pw
   bf setfont (0) stringwidth pop c mul bm dup add add
   def
/ph
   bfs l mul bm dup add add hs add
   def
/fns
      pw
      fnfs 4 mul dw add (Page 999) stringwidth pop add
    sub
  def
/tm margin twp {3} {2} ifelse div def
/sd 0 def
/y [ rm ph add bm add
          dup ] def
/sny dfs dfs add def
/snx sh tm dfs add sub def
/dy sny def
/dx tm dfs add def
/x [ tm			% left page
          dup 2 mul pw add	% right page
        ] def
/scx sh 2 div def
/fny dy def
/fnx scx def
/ly fnfs 2 div y sd get add def
/lx snx def
/d (Aug 28 2000 14:55) def
( EnrolmentFrame.java ) fn
sw 0 translate
90 rotate
1 hp
border
hborder
/x0 x 0 get bm add def
/y0 y 0 get bm bfs add hs add sub def
x0 y0 moveto
bf setfont
( package enroller;) s
( ) s
( import javax.swing.*;) s
( import java.awt.event.*;) s
( import java.awt.*;) s
( ) s
( /** A frame to display the Enrolment timetable GUI) s
(  * ) s
(  * @author Tim Dwyer) s
(  * @version 1.0 25/8/2000) s
(  */) s
( public class EnrolmentFrame extends JInternalFrame {) s
(   static int openFrameCount = 0;) s
(   static final int xOffset = 30, yOffset = 30;) s
( ) s
(   /** create the enrolment frame to display details from the) s
(    * given file and to enrol the given user) s
(    *) s
(    * @param fileName name of xml file holding enrolment data) s
(    * @param userName the name of the person to add to the enrolment) s
(    * list) s
(    */) s
(   public EnrolmentFrame\(String fileName, String userName\) {) s
(     super\("Enrolment File #" + \(++openFrameCount\), ) s
(         true, //resizable) s
(         true, //closable) s
(         true, //maximizable) s
(         true\);//iconifiable) s
( ) s
(     initGUI\(fileName,userName\);) s
( ) s
( ) s
(     //...Then set the window size or call pack...) s
(     setSize\(300,300\);) s
( ) s
(     //Set the window's location.) s
(     setLocation\(xOffset*openFrameCount, yOffset*openFrameCount\);) s
(   }) s
(   ) s
(   /**) s
(    * The initGUI method is an example of how to read and update the) s
(    * data structure.  It simply outputs the data as text in a ) s
(    * JTextArea, also adding "Harry" to each time slot and) s
(    * finally saves the file again.) s
(    *) s
(    * Replace the contents of this procedure to add your own GUI and) s
(    * implement the required functionality.) s
(    */) s
(   public void initGUI\(String fileName, String userName\) {) s
(     JTextArea textArea = new JTextArea\(\);) s
(     textArea.setEditable\(false\);) s
(     try{) s
(       // the enrolment object holds all the data) s
(       // which it reads in from fileName) s
(       Enrolment enrolment = new Enrolment\(fileName\);) s
( ) s
(       // Declare all the objects we'll need to refer to the data) s
(       // within enrolment) s
( ) s
(       // Day is a class that holds a set of times) s
(       Enrolment.Day day;) s
(       // days is a list of Days \(DayList extends java.util.Vector\)) s
(       Enrolment.DayList days;) s
(       // time is a reference to a timeslot within a given day) s
(       Enrolment.Day.Time time;) s
(       // times is a list of times) s
(       Enrolment.Day.TimeList times;) s
(       // enrolledList is a list of the names of ) s
(       // those enrolled \(a list of strings\)) s
/sd 1 def
2 hp
border
hborder
/x0 x 1 get bm add def
/y0 y 1 get bm bfs add hs add sub def
x0 y0 moveto
bf setfont
(       Enrolment.Day.Time.EnrolledList enrolledList;) s
( ) s
(       // get a list of all the available days) s
(       days = enrolment.getDayList\(\);) s
(   ) s
(       // For each day in days:) s
(       for\(int i = 0; i<days.size\(\); i++\) {) s
(         day = days.item\(i\);) s
( ) s
(         // Show the name of the day \(ie: "Wednesday"\) in our textArea ) s
(         textArea.append\(day.getName\(\) + "\\n"\);) s
( ) s
(         // get a list of the times available for the day) s
(         times = day.getTimeList\(\);) s
( ) s
(         // For each timeslot) s
(         for\(int j = 0; j<times.size\(\); j++\) {) s
(           time = times.item\(j\);) s
( ) s
(           // Show the start time and duration of the class) s
(           textArea.append\("  Time = " + time.getStartTime\(\)) s
(             + "  Duration = " + time.getDuration\(\) + "  EnrolmentLimit = ") s
(             + time.getEnrolmentLimit\(\) + "\\n"\);) s
( ) s
(           // Get all the people enrolled in that class) s
(           enrolledList = time.getEnrolledList\(\);) s
( ) s
(           // For each person enrolled) s
(           for\(int k = 0; k<enrolledList.size\(\); k++\) {) s
(             String enrolled = enrolledList.item\(k\);) s
( ) s
(             // Show the name in the text area) s
(             textArea.append\("    " + enrolled + "\\n"\);) s
(           }) s
( ) s
(           // Add a new entry to each timeslot) s
(           time.addEnrolled\(userName\);) s
(         }) s
(       }) s
(       // Save changes back out to the file) s
(       enrolment.save\(\);) s
(     } catch\(java.io.IOException e\) {) s
(       // display any error messages) s
(       e.printStackTrace\(\);) s
(     }) s
(     ) s
(     // add the text area to the frame) s
(     getContentPane\(\).add\(textArea\);) s
(   }) s
( }) s
( ) s
( ) s
/sd 0 def
1 sn
fnf
lg lgp
pagesave restore
showpage

%%Trailer
%%Pages: 1
docsave restore end
